
#Область ОбработчикиСобытийФормы

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	УстановитьЗаголовокФормы();
	
	ОбработатьПараметрыЗапуска();
	ПостОбработкаВывестиПараметрыВСообщения();
	ПараметрыЗаполненыКорректно = ПроверитьЗаполнениеПараметровОбработки();
	
	Если ПараметрыЗаполненыКорректно
		И Не РежимОтладки Тогда
		
		ВыгрузитьОшибки();
		
	КонецЕсли;
	
	Если Не РежимОтладки Тогда
		Отказ = Истина;
		ЗавершитьРаботуСистемы(Ложь, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Если ПустаяСтрока(ФорматЭкспорта) Тогда
		ФорматЭкспорта = ФорматЭкспортаReportJSON;
		УстановитьЗначениеФорматаЭкспортаНаФорме(ФорматЭкспорта);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

Процедура КаталогПроектаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	// перевести в немодальное
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = "Выбор каталога проекта";
	Если Диалог.Выбрать() Тогда
		КаталогПроекта = Диалог.Каталог + ПолучитьРазделительПути();
		ПостОбработкаПараметров();
	КонецЕсли;
	
КонецПроцедуры

Процедура ФорматЭкспортаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	ВыгрузитьОшибки();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыПрочитатьФайлПараметров(Кнопка)
	
	СтандартнаяОбработка = Ложь;
	// перевести в немодальное
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Укажите файл параметров acc.properties";
	Диалог.Фильтр = "acc.properties|acc.properties";
	Если Диалог.Выбрать() Тогда
		
		ПрочитатьФайлПараметров(Диалог.ПолноеИмяФайла);
		ПостОбработкаПараметров();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыПолучитьТекстДляФайлаПараметров(Кнопка)
	
	массивСтрок = Новый Массив;
	
	массивСтрок.Добавить( "acc.projectKey=" + Конфигурация.Наименование );
	массивСтрок.Добавить( "acc.catalog=" + КаталогПроекта );
	массивСтрок.Добавить( "acc.result=" + СтрЗаменить( ИмяФайлаРезультата, КаталогПроекта, "./" ) );
	массивСтрок.Добавить( "acc.sources=" + СтрЗаменить( КаталогИсходныхКодов, КаталогПроекта, "./" ) );
	массивСтрок.Добавить( "acc.check=" + Формат( ВыполнятьПроверку, "БЛ=false; БИ=true") );
	массивСтрок.Добавить( "acc.format=" + ФорматЭкспорта );
	массивСтрок.Добавить( "acc.titleError=" + ФорматПредставленияОшибки );
	массивСтрок.Добавить( "acc.relativePathToFiles=" + Формат( ВыводитьОтносительныеПути, "БЛ=false; БИ=true") );
	массивСтрок.Добавить( "acc.objectErrors=" + Формат( ВыводитьОшибкиОбъектов, "БЛ=false; БИ=true") );
	массивСтрок.Добавить( "acc.recreateProject=" + Формат( ПересоздатьКонфигурацию, "БЛ=false; БИ=true") );
	
	ВвестиСтроку(СтрСоединить( массивСтрок, Символы.ПС ),,,Истина );
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыгрузитьОшибки()
	
	ПересоздатьКонфигурацию();
	ЗапускПроверки();
	ИнициализироватьПервичныеДанные();
	ЭкспортироватьОшибкиАПК();
	
КонецПроцедуры

Процедура ПересоздатьКонфигурацию()

	Если Не ( ЗначениеЗаполнено( Конфигурация )
		И ПересоздатьКонфигурацию ) Тогда
		Возврат;
	КонецЕсли;
	
	новКонфигурация = Конфигурация.Скопировать();
	новКонфигурация.ЭтоКопия = Ложь;
	новКонфигурация.ОбъектКопия = Неопределено;
	новКонфигурация.Записать();
	
	старКонфигурацияОбъект = Конфигурация.ПолучитьОбъект();
	старКонфигурацияОбъект.Наименование = "Удалить_" + старКонфигурацияОбъект.Наименование;
	старКонфигурацияОбъект.Записать();
	
	Конфигурация = новКонфигурация.Ссылка;

КонецПроцедуры

Процедура ЗапускПроверки()
	
	Если Не ВыполнятьПроверку
		Или Не ЗначениеЗаполнено(Конфигурация) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Сообщить("Начало проверки конфигурации " + ТекущаяДата());
	
	ФормаЗапускаПроверки = ПолучитьФорму("Обработка.ЗапускПроверки.Форма");
	ФормаЗапускаПроверки.ОбработкаОбъект.ПоказыватьПредупреждения = Ложь;
	ФормаЗапускаПроверки.Конфигурация							  = Конфигурация;
	ФормаЗапускаПроверки.РегистрироватьВсеОшибкиКакОсобенности	  = Ложь;
	ФормаЗапускаПроверки.Открыть();
	ТекстОшибки = ФормаЗапускаПроверки.ВыполнитьПроверку();
	ФормаЗапускаПроверки.Закрыть();
	
	Если ЗначениеЗаполнено( ТекстОшибки ) Тогда
		
		Сообщить( "При выполнении проверки произошла ошибка: " );
		Сообщить( ТекстОшибки );
		
	КонецЕсли;
	
	Сообщить("Окончание проверки конфигурации " + ТекущаяДата());

КонецПроцедуры

Процедура УстановитьЗначениеФорматаЭкспортаНаФорме(Знач ВходящееЗначение)
	
	Элемент = ЭтаФорма.ЭлементыФормы.ФорматЭкспорта; 
	СписокВыборка = Элемент.СписокВыбора;
	
	ВходящееЗначение = нРег(ВходящееЗначение);
	Значение = СписокВыборка.НайтиПоЗначению(ВходящееЗначение);	
	Элемент.Значение = Значение;
	
КонецПроцедуры

Процедура УстановитьЗаголовокФормы()
	
	Сообщить("Версия обработки " + ВерсияОбработки);	
	ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " v." + ВерсияОбработки;
	
КонецПроцедуры

#Область ОбработкаПараметров

Процедура ОбработатьПараметрыЗапуска()
	
	// Порядок чтения параметров
	// Файл параметров берется из аргумента, если не указан, то ищется рядом с обработкой
	// Параметры читаются из аргументов, если не указаны, то из файла параметров

	ПутьКФайлуПараметров = "";
	
	ПутьКФайлуОбработки = АбсолютныйПуть( ИспользуемоеИмяФайла );
	
	РежимОтладки = Не ЗначениеЗаполнено( ПараметрЗапуска );
	
	Аргументы = СтрРазделить(ПараметрЗапуска, ";", Ложь);
	ФайлОбработки = Новый Файл(ИспользуемоеИмяФайла);
	ПутьКФайлуОбработки = ФайлОбработки.Путь;
	
	Для каждого цАргумент Из Аргументы Цикл
		
		ЗаполнитьПараметр(цАргумент, "acc.propertiesPaths", ПутьКФайлуПараметров);
		Если вРег(цАргумент) = "/DEBUG" Тогда  // за счет параметра открываем для отладки в клиенте
			РежимОтладки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ПутьКФайлуПараметров) Тогда
		
		ПутьКФайлуПараметров = ПутьКФайлуОбработки + "acc.properties";
		
	КонецЕсли;
	
	ПрочитатьФайлПараметров(ПутьКФайлуПараметров);
	
	Для каждого цАргумент Из Аргументы Цикл
		
		ПрочитатьПараметрыВСтроке(цАргумент);
		
	КонецЦикла;
	
	ОбеспечитьАбсолютныйПутьККаталогу(ПутьКФайлуОбработки);
	ПостОбработкаПараметров();
	
КонецПроцедуры

Функция ПроверитьЗаполнениеПараметровОбработки()
	
	Результат = Истина;
	
	Если Конфигурация.Пустая() Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Если Не КаталогСуществует( КаталогПроекта ) Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Если Не КаталогСуществует( КаталогИсходныхКодов ) Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ФорматЭкспорта) Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ФорматПредставленияОшибки) Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПрочитатьПараметрыВСтроке(Знач СтрокаСПараметром)
	
	ЗаполнитьПараметр(СтрокаСПараметром, "acc.projectKey", ИмяПроекта);
	ЗаполнитьПараметр(СтрокаСПараметром, "acc.catalog", КаталогПроекта);
	ЗаполнитьПараметр(СтрокаСПараметром, "acc.result", ИмяФайлаРезультата);
	ЗаполнитьПараметр(СтрокаСПараметром, "acc.sources", КаталогИсходныхКодов);
	ЗаполнитьПараметр(СтрокаСПараметром, "acc.check", ЗначениеПараметра_ВыполнятьПроверку);
	ЗаполнитьПараметр(СтрокаСПараметром, "acc.format", ФорматЭкспорта);
	ЗаполнитьПараметр(СтрокаСПараметром, "acc.titleError", ФорматПредставленияОшибки);
	ЗаполнитьПараметр(СтрокаСПараметром, "acc.relativePathToFiles", ЗначениеПараметра_ОтносительныеПутиКФайлам);
	ЗаполнитьПараметр(СтрокаСПараметром, "acc.objectErrors", ЗначениеПараметра_ВыводитьОшибкиОбъектов);
	ЗаполнитьПараметр(СтрокаСПараметром, "acc.recreateProject", ЗначениеПараметра_ПересоздатьКонфигурацию);

КонецПроцедуры

Процедура ЗаполнитьПараметр(Знач СтрокаПараметра, Знач ИмяПараметра, ЗначениеПараметра)
	
	текСтрокаВРег = ВРег(СтрокаПараметра);
	
	Если Не СтрНачинаетсяС(текСтрокаВРег, ВРег(ИмяПараметра)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	позРавно = СтрНайти( СтрокаПараметра, "=" );
	
	Если позРавно = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗначениеПараметра = СокрЛП( Сред( СтрокаПараметра, позРавно + 1 ) );
	
	Сообщить( "Найден параметр " + ИмяПараметра + " = " + ЗначениеПараметра );
	
КонецПроцедуры

Процедура ПрочитатьФайлПараметров(Знач ПутьКФайлуПараметров)
	
	Сообщить( СтрШаблон( "Читаю файл параметров %1", ПутьКФайлуПараметров ) );
	
	ПутьКФайлуПараметров = АбсолютныйПуть( ПутьКФайлуПараметров );
	
	Если Не фФайлСуществует( ПутьКФайлуПараметров ) Тогда
		Сообщить( СтрШаблон( "Файл параметров %1 не найден.", ПутьКФайлуПараметров ) );
		Возврат;
	КонецЕсли;
	
	чтениеФайлаПараметров = Новый ТекстовыйДокумент;
	чтениеФайлаПараметров.Прочитать( ПутьКФайлуПараметров, КодировкаТекста.UTF8 );
	
	Для ц = 0 По чтениеФайлаПараметров.КоличествоСтрок() Цикл
		
		текСтрока = чтениеФайлаПараметров.ПолучитьСтроку( ц );
		
		ПрочитатьПараметрыВСтроке( текСтрока );
		
	КонецЦикла;
	
	чтениеФайлаПараметров = Неопределено;
	
	ОбеспечитьАбсолютныйПутьККаталогу( КаталогРодитель(ПутьКФайлуПараметров) );
	
КонецПроцедуры

Процедура ОбеспечитьАбсолютныйПутьККаталогу(Знач КаталогРодитель)
	
	Если Не ЗначениеЗаполнено(КаталогПроекта) Тогда
		Возврат;
	КонецЕсли;
	
	Сообщить(СтрШаблон("Вычисление пути к каталогу проекта. Текущий путь = %1, каталог-родитель = %2", КаталогПроекта, КаталогРодитель));
	
	Если Не СтрНачинаетсяС(КаталогПроекта, ".") Тогда
		
		Если КаталогСуществует( КаталогПроекта ) Тогда
			
			// каталог найден и существует
			
			Сообщить(СтрШаблон("Текущий путь = %1", КаталогПроекта));
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КаталогРодитель) Тогда
		Возврат;
	КонецЕсли;
	
	каталог = КаталогРодитель + ПолучитьРазделительПути() + КаталогПроекта;
	
	Сообщить(СтрШаблон("Вычисление по родителю = %1", каталог));
	
	Если КаталогСуществует( каталог ) Тогда
		
		// каталог найден и существует
		
		КаталогПроекта = АбсолютныйПуть( каталог );
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПостОбработкаПараметров()
	
	ОбеспечитьАбсолютныйПутьККаталогуИсходныхКодов();
	
	Если ЗначениеЗаполнено(ИмяПроекта) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Конфигурации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Конфигурации КАК Конфигурации
		|ГДЕ
		|	Конфигурации.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", ИмяПроекта);
		
		выборка = Запрос.Выполнить().Выбрать();
		
		Если выборка.Следующий() Тогда
			
			Конфигурация = выборка.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	КаталогПроекта = АбсолютныйПуть( КаталогПроекта );
	
	Если ВыводитьОтносительныеПути Тогда
		
		КаталогИсходныхКодов = СтрЗаменить( КаталогИсходныхКодов, "\" ,"/" ); // Заменяем на прямые слешы, т.к. их не придется экранировать в джсоне
		
	Иначе
		
		КаталогИсходныхКодов = АбсолютныйПуть( КаталогИсходныхКодов );
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено( КаталогПроекта )
		И Не СтрЗаканчиваетсяНа( КаталогПроекта, "/" ) Тогда
		
		КаталогПроекта = КаталогПроекта + "/";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено( КаталогИсходныхКодов )
		И Не СтрЗаканчиваетсяНа( КаталогИсходныхКодов, "/" ) Тогда
		
		КаталогИсходныхКодов = КаталогИсходныхКодов + "/";
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФорматПредставленияОшибки) Тогда
		ФорматПредставленияОшибки = ФорматОшибкиКодНаименование;
	КонецЕсли;
	
	ВыполнятьПроверку         = Значение_Истина( ЗначениеПараметра_ВыполнятьПроверку );
	ВыводитьОтносительныеПути = Значение_Истина( ЗначениеПараметра_ОтносительныеПутиКФайлам );
	ВыводитьОшибкиОбъектов    = Значение_Истина( ЗначениеПараметра_ВыводитьОшибкиОбъектов );
	ПересоздатьКонфигурацию   = Значение_Истина( ЗначениеПараметра_ПересоздатьКонфигурацию );
	
	Если ЗначениеЗаполнено( КаталогПроекта ) Тогда
		
		Если Не ЗначениеЗаполнено( ИмяФайлаРезультата ) Тогда
			
			Если нРег(ФорматЭкспорта) = ФорматЭкспортаGenericIssue Тогда
				ИмяФайлаРезультата = АбсолютныйПуть( КаталогПроекта + ПолучитьРазделительПути() + "acc-generic-issue.json" );
			Иначе
				ИмяФайлаРезультата = АбсолютныйПуть( КаталогПроекта + ПолучитьРазделительПути() + "acc-json.json" );
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не СтрНайти( ИмяФайлаРезультата, ":" ) Тогда
			// Передан относительный путь
			
			ИмяФайлаРезультата = АбсолютныйПуть( КаталогПроекта + ПолучитьРазделительПути() + ИмяФайлаРезультата );
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция Значение_Истина( Знач пСтроковоеЗначениеПараметра )

	ВРегЗначение = ВРег(пСтроковоеЗначениеПараметра);
	Возврат ВРегЗначение = "TRUE" ИЛИ ВРегЗначение = "1" ИЛИ ВРегЗначение = "ИСТИНА";

КонецФункции


Процедура ОбеспечитьАбсолютныйПутьККаталогуИсходныхКодов()
	
	Если ПустаяСтрока(КаталогИсходныхКодов) Тогда
		КаталогИсходныхКодов = "src";
	КонецЕсли;
	
	Сообщить("Вычисление пути к исходникам");
	
	КаталогИсходныхКодов = НайтиКаталогИсходныхКодов();
	
	Сообщить("Текущий каталог исходных кодов: " + КаталогИсходныхКодов);
	
	Сообщить("Уточнение каталога по файлам конфигурации");
	
	найденныеФайлы = НайтиФайлы( КаталогИсходныхКодов, "Configuration.xml", Истина );
	
	Если найденныеФайлы.Количество() > 0 Тогда
		
		ЭтоВыгрузкаEDT = Ложь;
		
		КаталогИсходныхКодов = найденныеФайлы[0].Путь;
		
		Сообщить("Найден файл Configuration.xml: " + найденныеФайлы[0].ПолноеИмя);
		Сообщить("Это выгрузка конфигуратора");
		Сообщить("Каталог исходных файлов: " + КаталогИсходныхКодов);
		Возврат;
		
	КонецЕсли;
	
	найденныеФайлы = НайтиФайлы( КаталогИсходныхКодов, "Configuration.mdo", Истина );
	
	Если найденныеФайлы.Количество() > 0 Тогда
		
		ЭтоВыгрузкаEDT = Истина;
		
		КаталогИсходныхКодов = КаталогРодитель( найденныеФайлы[0].Путь );
		
		Сообщить("Найден файл Configuration.mdo: " + найденныеФайлы[0].ПолноеИмя);
		Сообщить("Это выгрузка EDT");
		Сообщить("Каталог исходных файлов: " + КаталогИсходныхКодов);
		Возврат;
		
	КонецЕсли;
	
	Сообщить("Не удалось определить тип выгрузки. Возможно каталог исходных кодов задан не верно.");
	
КонецПроцедуры

Функция НайтиКаталогИсходныхКодов()
	
	ЭтоПолныйПуть = СтрНайти(КаталогИсходныхКодов, ":") > 0;
	
	Если ЭтоПолныйПуть
		И КаталогСуществует( КаталогИсходныхКодов ) Тогда
		
		// если каталог исходных был задан не относительный - запрещаем выводить относительные
		ВыводитьОтносительныеПути = Ложь;
		
		Сообщить("Каталог исходных файлов по переданному полному пути: " + КаталогИсходныхКодов );
		
		Возврат КаталогИсходныхКодов;
		
	КонецЕсли;
	
	Если Не ЭтоПолныйПуть Тогда
		
		Каталог = КаталогПроекта + ПолучитьРазделительПути() + СтрЗаменить(КаталогИсходныхКодов, "/", ПолучитьРазделительПути());
		
		Если КаталогСуществует( Каталог ) Тогда
			
			Возврат Каталог;
			
		Иначе
			
			Сообщить("Не удалось определить каталог исходных кодов как [каталог проекта] + [каталог исходных кодов]");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КаталогПроекта;
	
КонецФункции

Процедура ПостОбработкаВывестиПараметрыВСообщения()
	
	Сообщить("Имя проекта = " + ИмяПроекта);
	Сообщить("Конфигурация = " + Конфигурация + ", код: " + Конфигурация.Код);
	Сообщить("Каталог проекта = " + КаталогПроекта);
	Сообщить("Файл результата = " + ИмяФайлаРезультата);
	Сообщить("Каталог исходников = " + КаталогИсходныхКодов);
	Сообщить("Выполнять проверку = " + ВыполнятьПроверку);
	Сообщить("Формат экспорта = " + ФорматЭкспорта);

КонецПроцедуры
	
#КонецОбласти

#Область ФайловыеОперации

Функция АбсолютныйПуть( Знач пПуть )
	
	Файл = Новый Файл(пПуть);
	Возврат СтрЗаменить( Файл.ПолноеИмя, "\" ,"/" ); // Заменяем на прямые слешы, т.к. из не придется экранировать в джсоне
	
КонецФункции

Функция КаталогРодитель( Знач пПуть )
	
	Файл = Новый Файл(пПуть);
	Возврат Файл.Путь;
	
КонецФункции

// Есть глобальный метод ФайлСуществует, но он не проверяет, что это файл
Функция фФайлСуществует( Знач пФайл )
	
	Файл = Новый Файл(пФайл);
	Возврат Файл.Существует() И Файл.ЭтоФайл();
	
КонецФункции

Функция КаталогСуществует( Знач пКаталог )
	
	Файл = Новый Файл(пКаталог);
	Возврат Файл.Существует() И Файл.ЭтоКаталог();
	
КонецФункции

#КонецОбласти

#КонецОбласти